#include <stdio.h>
#include <stdlib.h>

// Structure to represent a member
struct Member {
    int memberID;
    char name[50];
    struct Member* next;
};

// Structure to represent a stack node
struct StackNode {
    struct Member* member;
    struct StackNode* next;
};

// Global variables
struct Member* head = NULL;
struct StackNode* undoStack = NULL;

// Function to display all members
void displayMembers() {
    struct Member* current = head;

    if (current == NULL) {
        printf("No members found.\n");
        return;
    }

    printf("Member List:\n");
    while (current != NULL) {
        printf("ID: %d, Name: %s\n", current->memberID, current->name);
        current = current->next;
    }
}

// Function to search for a member by ID
struct Member* searchMember(int memberID) {
    struct Member* current = head;

    while (current != NULL) {
        if (current->memberID == memberID) {
            return current;
        }
        current = current->next;
    }

    return NULL;
}

// Function to insert a new member
void insertMember(int memberID, char name[]) {
    struct Member* existingMember = searchMember(memberID);

    if (existingMember != NULL) {
        printf("Member with ID %d already exists.\n", memberID);
        return;
    }

    struct Member* newMember = (struct Member*)malloc(sizeof(struct Member));
    newMember->memberID = memberID;
    strcpy(newMember->name, name);
    newMember->next = head;
    head = newMember;

    // Push the new member onto the undo stack
    struct StackNode* stackNode = (struct StackNode*)malloc(sizeof(struct StackNode));
    stackNode->member = newMember;
    stackNode->next = undoStack;
    undoStack = stackNode;

    printf("Member added successfully.\n");
}

// Function to delete a member by memberID
void deleteMember(int memberID) {
    struct Member* current = head;
    struct Member* prev = NULL;

    while (current != NULL && current->memberID != memberID) {
        prev = current;
        current = current->next;
    }

    if (current == NULL) {
        printf("Member not found.\n");
        return;
    }

    if (prev == NULL) {
        head = current->next;
    } else {
        prev->next = current->next;
    }

    free(current);
    printf("Member deleted successfully.\n");
}

// Function to undo the last member addition
void undoAddMember() {
    if (undoStack == NULL) {
        printf("No member to undo.\n");
        return;
    }

    struct StackNode* stackNode = undoStack;
    undoStack = undoStack->next;

    // Delete the last added member
    deleteMember(stackNode->member->memberID);
    free(stackNode->member);
    free(stackNode);

    printf("Undo successful.\n");
}

// Main function
int main() {
    int choice;
    int memberID;
    char name[50];

    while (1) {
        printf("Sports Center Management System\n");
        printf("1. Display Members\n");
        printf("2. Insert Member\n");
        printf("3. Delete Member\n");
        printf("4. Search Member\n");
        printf("5. Undo Add Member\n");
        printf("6. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                displayMembers();
                break;
            case 2:
                printf("Enter Member ID: ");
                scanf("%d", &memberID);
                printf("Enter Member Name: ");
                scanf("%s", name);
                insertMember(memberID, name);
                break;
            case 3:
                printf("Enter Member ID to delete: ");
                scanf("%d", &memberID);
                deleteMember(memberID);
                break;
            case 4:
                printf("Enter Member ID to search: ");
                scanf("%d", &memberID);
                struct Member* foundMember = searchMember(memberID);
                if (foundMember != NULL) {
                    printf("Found Member: ID: %d, Name: %s\n", foundMember->memberID, foundMember->name);
                } else {
                    printf("Member not found.\n");
                }
                break;
            case 5:
                undoAddMember();
                break;
            case 6:
                exit(0);
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }

    return 0;
}
